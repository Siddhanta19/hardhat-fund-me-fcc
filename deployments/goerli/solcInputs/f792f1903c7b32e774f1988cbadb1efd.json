{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// Get Funds from Users\n// Withdraw Funds\n// Set a minimum funding value in USD\n\nimport \"./PriceConverter.sol\";\n\n// 838,793\n// 819,070\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 10 * 1e18; // 1 * 10 ** 18\n    // 21,393 gas - constant\n    // 23,515 gas - non-constant\n\n    error NotOwner();\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunder;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        // i_owner = whoever deploys the contract;\n\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // Want to be able to set a minimum fund amount in USD.\n        // 1. How do we send ETH to this contract\n        // msg.value.getConversionRate();\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough\"\n        ); // 1e18 = 1 * 10 ** 18 = 10000000000000000\n        funders.push(msg.sender);\n        addressToAmountFunder[msg.sender] = msg.value;\n        // What is reverting? -> transaction undone!\n        // undo any action b4 and send the remaining gas\n    }\n\n    function withdraw() public onlyOwner {\n        // require(msg.sender == i_owner, \"Sender is not i_owner!\");\n        /* uint256 fundersLength = funders.length;\n        for (uint256 i = 0; i < fundersLength; i++) {\n            address funder = funders[i];\n            addressToAmountFunder[funder] = 0;\n        } */\n        // reset the array\n        funders = new address[](0);\n        // actually withdraw the funds\n\n        // transfer, send, call\n\n        // msg.sender = address;\n        // payable(msg.sender) = payable address;\n\n        payable(msg.sender).transfer(address(this).balance); // transfer\n\n        bool sendSuccess = payable(msg.sender).send(address(this).balance); //send\n        require(sendSuccess, \"Send Failed!\");\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed!\");\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Sender is not i_owner!\");\n        if (msg.sender != i_owner) revert NotOwner();\n        _;\n    }\n\n    // What happens if someone sends this contract ETH without calling the fund func\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n    // fallback()\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // ABI\n        // Address - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        //  2000.0000000000\n        return uint256(price * 1e10); // 1**10 = 10000000000\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}